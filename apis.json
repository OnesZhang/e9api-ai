{
  "APIs": [
    {
      "returns": {
        "type": "String", 
        "description": "第一个未必填字段的标识，格式为'field${fieldid}_${rowIndex}'"
      }, 
      "description": "获取校验必填逻辑第一个未必填的字段", 
      "name": "getFirstRequiredEmptyField", 
      "signature": "WfForm.getFirstRequiredEmptyField: function()", 
      "example": [
        "var emptyField = WfForm.getFirstRequiredEmptyField(); //获取调用时刻的第一个未必填字段"
      ], 
      "id": 47
    }, 
    {
      "description": "扩展签字意见输入框底部按钮", 
      "parameters": [
        {
          "required": true, 
          "type": "React Comp Array", 
          "name": "comps", 
          "description": "需要扩充的React组件数组"
        }
      ], 
      "signature": "WfForm.appendSignEditorBottomBar: function(comps=[])", 
      "name": "appendSignEditorBottomBar", 
      "example": [
        "WfForm.appendSignEditorBottomBar([\n    React.createElement(\"div\",{className:\"wf-req-signbtn\",children:\"自定义按钮1\"}),\n    <div>自定义按钮2</div>\n]);"
      ], 
      "id": 46
    }, 
    {
      "description": "扩展浏览按钮取数接口参数值", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "required": true, 
          "type": "JSON", 
          "name": "jsonParam", 
          "description": "扩展的url参数，JSON中key-value格式"
        }
      ], 
      "example": [
        "WfForm.appendBrowserDataUrlParam(\"field395\", {\"customerid\":\"2\"}); //给浏览按钮395请求后台数据时增加url参数customerid"
      ], 
      "signature": "WfForm.appendBrowserDataUrlParam: function(fieldMark, jsonParam)", 
      "id": 45, 
      "name": "appendBrowserDataUrlParam"
    }, 
    {
      "description": "扩展提交操作发送给服务端的参数", 
      "example": [
        "WfForm.appendSubmitParam({cus_param1:'11', cus_param2:'测试'}); //服务端可通过request对象取到参数值request.getParameter('cus_param1')"
      ], 
      "params": [
        {
          "required": false, 
          "type": "Object", 
          "name": "obj", 
          "description": "JSON格式自定义参数"
        }
      ], 
      "signature": "WfForm.appendSubmitParam: function(obj={})", 
      "id": 44, 
      "name": "appendSubmitParam"
    }, 
    {
      "description": "移动端打开链接方式", 
      "example": [
        "window.showHoverWindow('/workflow/test.jsp', '/req');   //主界面打开链接", 
        "window.showHoverWindow('https://www.baidu.com', '/req/editDetailRow');   //明细行编辑界面打开链接"
      ], 
      "params": [
        {
          "required": true, 
          "type": "String", 
          "name": "url", 
          "description": "打开的链接地址"
        }, 
        {
          "required": true, 
          "type": "String", 
          "name": "baseRoute", 
          "description": "当前路由地址，具体见url地址，明细编辑打开传'/req/editDetailRow'"
        }
      ], 
      "signature": "window.showHoverWindow: function(url, baseRoute)", 
      "id": 43, 
      "name": "showHoverWindow"
    }, 
    {
      "description": "强制刷新表单页面", 
      "example": [
        "WfForm.reloadPage();", 
        "WfForm.reloadPage({requestid:'11'});    //覆盖参数"
      ], 
      "params": [
        {
          "required": false, 
          "type": "Object", 
          "name": "params", 
          "description": "自定义参数，覆盖默认参数"
        }
      ], 
      "signature": "reloadPage: function(params={})", 
      "id": 42, 
      "name": "reloadPage"
    }, 
    {
      "params": [
        {
          "required": true, 
          "type": "String", 
          "name": "type", 
          "description": "按钮类型(控制台可通过mobx.toJS(WfForm.getGlobalStore().rightMenu.rightMenus)方式定位具体按钮type)"
        }
      ], 
      "description": "调用表单右键事件逻辑", 
      "name": "doRightBtnEvent", 
      "signature": "doRightBtnEvent: function(type)", 
      "example": [
        "WfForm.doRightBtnEvent('BTN_SUBBACKNAME');     //触发提交需反馈", 
        "WfForm.doRightBtnEvent('BTN_SUBMIT');     //触发提交不需反馈", 
        "WfForm.doRightBtnEvent('BTN_WFSAVE');     //触发保存", 
        "WfForm.doRightBtnEvent('BTN_REJECTNAME');     //触发退回", 
        "WfForm.doRightBtnEvent('BTN_FORWARD');     //触发转发", 
        "WfForm.doRightBtnEvent('BTN_REMARKADVICE');     //触发意见征询", 
        "WfForm.doRightBtnEvent('BTN_TURNTODO');     //触发转办", 
        "WfForm.doRightBtnEvent('BTN_DORETRACT');     //触发强制收回", 
        "WfForm.doRightBtnEvent('BTN_PRINT');     //触发打印"
      ], 
      "id": 41
    }, 
    {
      "description": "设置表单顶部按钮、右键菜单置灰不可操作和恢复操作功能", 
      "example": [
        "function submitForm(params){\n    WfForm.controlBtnDisabled(true);    //操作按钮置灰\n    ...\n    WfForm.controlBtnDisabled(false);\n}"
      ], 
      "params": [
        {
          "required": true, 
          "type": "boolean", 
          "name": "isDisabled", 
          "description": "true：按钮全部置灰不可操作，false：恢复按钮可操作状态"
        }
      ], 
      "signature": "controlBtnDisabled: function(isDisabled)", 
      "id": 40, 
      "name": "controlBtnDisabled"
    }, 
    {
      "description": "系统样式的Confirm确认框。", 
      "example": [
        "WfForm.showConfirm(\"确认删除吗？\", function(){\n    alert(\"删除成功\"); \n});", 
        "WfForm.showConfirm(\"请问你是否需要技术协助？\",function(){\n    alert(\"点击确认调用的事件\");\n},function(){\n    alert(\"点击取消调用的事件\");\n},{\n    title:\"信息确认\",\n    okText:\"需要\",\n    cancelText:\"不需要\"\n});"
      ], 
      "params": [
        {
          "required": true, 
          "type": "String", 
          "name": "content", 
          "description": "确认信息"
        }, 
        {
          "required": true, 
          "type": "Function", 
          "name": "okEvent", 
          "description": "点击确认事件"
        }, 
        {
          "required": false, 
          "type": "Function", 
          "name": "cancelEvent", 
          "description": "点击取消事件"
        }, 
        {
          "required": false, 
          "type": "Object", 
          "name": "otherInfo", 
          "description": "自定义信息(按钮名称)"
        }
      ], 
      "signature": "showConfirm: function(content, okEvent, cancelEvent, otherInfo={})", 
      "id": 36, 
      "name": "showConfirm"
    }, 
    {
      "description": "可控制显示时间的message信息。", 
      "example": [
        "WfForm.showMessage(\"结束时间需大于开始时间\");   //警告信息，1.5s后自动消失", 
        "WfForm.showMessage(\"运算错误\", 2, 10);  //错误信息，10s后消失"
      ], 
      "params": [
        {
          "required": true, 
          "type": "String", 
          "name": "msg", 
          "description": "提示信息内容"
        }, 
        {
          "required": false, 
          "type": "int", 
          "name": "type", 
          "description": "提示类型，1(警告)、2(错误)、3(成功)、4(一般)，默认为1，不同类型提示信息效果不同"
        }, 
        {
          "required": false, 
          "type": "Float", 
          "name": "duration", 
          "description": "多长时间自动消失，单位秒，默认为1.5秒"
        }
      ], 
      "signature": "showMessage: function(msg, type, duration)", 
      "id": 35, 
      "name": "showMessage"
    }, 
    {
      "description": "获取当前打开请求的基础信息，包括路径id、节点id、表单id、主次账号信息。", 
      "example": [
        "console.log(WfForm.getBaseInfo());    //返回当前请求基础信息"
      ], 
      "returns": {
        "type": "Object", 
        "description": "当前请求的基础信息对象，包括以下属性：\n- f_weaver_belongto_userid: 用户信息\n- f_weaver_belongto_usertype: 用户类型\n- formid: 表单id\n- isbill: 表单类型（新表单/老表单）\n- nodeid: 节点id\n- requestid: 请求id\n- workflowid: 路径id"
      }, 
      "signature": "getBaseInfo: function()", 
      "id": 34, 
      "name": "getBaseInfo"
    }, 
    {
      "description": "根据明细行标识获取序号(第几行)。", 
      "parameters": [
        {
          "type": "String", 
          "name": "mark", 
          "description": "明细表标识，支持两种格式detail_${dindex}或者field${fieldid}_${rowIndex}"
        }, 
        {
          "type": "Int", 
          "name": "rowIndex", 
          "description": "行标识，第一种格式detail_${dindex}才需要传此参数"
        }
      ], 
      "example": [
        "WfForm.getDetailRowSerailNum(\"detail_1\", 3);    //获取明细1下标为3的行序号", 
        "WfForm.getDetailRowSerailNum(\"field222_3\");    //获取字段222对应明细表下标为3的行序号"
      ], 
      "signature": "getDetailRowSerailNum: function(mark, rowIndex)", 
      "id": 33, 
      "name": "getDetailRowSerailNum"
    }, 
    {
      "description": "设置明细添加时是否复制最后一行记录。", 
      "parameters": [
        {
          "type": "String", 
          "name": "detailMark", 
          "description": "明细表标识，明细1就是detail_1，以此递增类推"
        }, 
        {
          "type": "Boolean", 
          "name": "needCopy", 
          "description": "是否需要启用复制，true：启用，false：不启用"
        }
      ], 
      "example": [
        "jQuery(document).ready(function(){\n    WfForm.setDetailAddUseCopy(\"detail_1\", true);\n});"
      ], 
      "signature": "setDetailAddUseCopy: function(detailMark, needCopy)", 
      "id": 27, 
      "name": "setDetailAddUseCopy"
    }, 
    {
      "description": "获取明细表的总行数。", 
      "parameters": [
        {
          "type": "String", 
          "name": "detailMark", 
          "description": "明细表标识，明细1就是detail_1，以此递增类推"
        }
      ], 
      "example": [
        "console.log(WfForm.getDetailRowCount(\"detail_2\")); //输出明细总行数，注意此结果只代表明细总行数，不能用作循环行"
      ], 
      "signature": "getDetailRowCount: function(detailMark)", 
      "id": 26, 
      "name": "getDetailRowCount"
    }, 
    {
      "description": "获取明细已有行的数据库主键。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标识，格式为field${字段ID}_${明细行号}，用于定位属于哪个明细表"
        }
      ], 
      "example": [
        "WfForm.getDetailRowKey(\"field112_3\");   //获取明细第四行的主键"
      ], 
      "signature": "getDetailRowKey: function(fieldMark)", 
      "id": 25, 
      "name": "getDetailRowKey"
    }, 
    {
      "description": "控制明细数据行的显示和隐藏。", 
      "parameters": [
        {
          "type": "String", 
          "name": "detailMark", 
          "description": "明细表标识，例如明细1为detail_1，以此递增"
        }, 
        {
          "type": "String", 
          "name": "rowIndexMark", 
          "description": "需要操作的行标识，选中全部行为\"all\"，选中部分行为行号标识的字符串，例如\"1,2,3\""
        }, 
        {
          "type": "boolean", 
          "name": "needHide", 
          "description": "是否隐藏行，true为隐藏行，false为显示行"
        }
      ], 
      "example": [
        "WfForm.controlDetailRowDisplay(\"detail_1\", \"3,5\", true);   //明细1行标为3,5的行隐藏不显示", 
        "WfForm.controlDetailRowDisplay(\"detail_1\", \"all\", false);  //明细1所有行都显示不隐藏"
      ], 
      "signature": "controlDetailRowDisplay: function(detailMark, rowIndexMark, needHide)", 
      "id": 24, 
      "name": "controlDetailRowDisplay"
    }, 
    {
      "description": "控制明细行的勾选框是否禁用。", 
      "parameters": [
        {
          "type": "String", 
          "name": "detailMark", 
          "description": "明细表标识，例如明细1为detail_1，以此递增"
        }, 
        {
          "type": "String", 
          "name": "rowIndexMark", 
          "description": "需要操作的行标识，选中全部行为\"all\"，选中部分行为行号标识的字符串，例如\"1,2,3\""
        }, 
        {
          "type": "boolean", 
          "name": "disableCheck", 
          "description": "是否禁用勾选，true为禁用勾选，false为允许勾选"
        }
      ], 
      "example": [
        "WfForm.controlDetailRowDisableCheck(\"detail_1\", \"all\", true);   //明细1所有行的勾选框置灰禁止选中", 
        "WfForm.controlDetailRowDisableCheck(\"detail_1\", \"1,2\", false);  //明细1行标为1,2的行释放置灰，允许勾选"
      ], 
      "signature": "controlDetailRowDisableCheck: function(detailMark, rowIndexMark, disableCheck)", 
      "id": 23, 
      "name": "controlDetailRowDisableCheck"
    }, 
    {
      "description": "获取明细表选中行的行标识。", 
      "parameters": [
        {
          "type": "String", 
          "name": "detailMark", 
          "description": "明细表标识，例如明细1为detail_1，以此递增"
        }
      ], 
      "example": "console.log(WfForm.getDetailCheckedRowIndexStr(\"detail_2\"));    //输出选中行1，3...等等", 
      "signature": "getDetailCheckedRowIndexStr: function(detailMark)", 
      "id": 22, 
      "name": "getDetailCheckedRowIndexStr"
    }, 
    {
      "description": "获取明细表所有行标识。", 
      "parameters": [
        {
          "type": "String", 
          "name": "detailMark", 
          "description": "明细表标识，例如明细1为detail_1，以此递增"
        }
      ], 
      "example": "console.log(WfForm.getDetailAllRowIndexStr(\"detail_2\"));    //输出1，3...等等\n\n//遍历明细行的写法\nvar rowArr = WfForm.getDetailAllRowIndexStr(\"detail_1\").split(\",\");\nfor(var i=0; i<rowArr.length; i++){\n    var rowIndex = rowArr[i];\n    if(rowIndex !== \"\"){\n        var fieldMark = \"field111_\"+rowIndex;    //遍历明细行字段\n    }\n}", 
      "signature": "getDetailAllRowIndexStr: function(detailMark)", 
      "id": 21, 
      "name": "getDetailAllRowIndexStr"
    }, 
    {
      "description": "选中明细表指定行/全部行。", 
      "parameters": [
        {
          "type": "String", 
          "name": "detailMark", 
          "description": "明细表标识，例如明细1为detail_1，以此递增"
        }, 
        {
          "type": "String", 
          "name": "rowIndexMark", 
          "description": "需要选中的行标识，选中全部行: \"all\"，选中部分行：\"1,2,3\""
        }, 
        {
          "type": "Boolean", 
          "name": "needClearBeforeChecked", 
          "description": "是否需要清除已选"
        }
      ], 
      "example": "WfForm.checkDetailRow(\"detail_2\", \"all\");     //勾选明细2所有行\nWfForm.checkDetailRow(\"detail_2\", \"\", true);  //清除明细2所有已选\nWfForm.checkDetailRow(\"detail_2\", \"3,6\", true);     //清除明细2全部已选，再勾选行标为3,6的行\nWfForm.checkDetailRow(\"detail_2\", \"7\", false); \n//保持已选记录，追加选中行标为7的行", 
      "signature": "checkDetailRow: function(detailMark, rowIndexMark, needClearBeforeChecked)", 
      "id": 20, 
      "name": "checkDetailRow"
    }, 
    {
      "description": "删除明细表指定行/全部行。", 
      "parameters": [
        {
          "type": "String", 
          "name": "detailMark", 
          "description": "明细表标识，例如明细1为detail_1，以此递增"
        }, 
        {
          "type": "String", 
          "name": "rowIndexMark", 
          "description": "需要删除的行标识，删除全部行: \"all\"，删除部分行：\"1,2,3\""
        }
      ], 
      "example": "WfForm.delDetailRow(\"detail_1\", \"all\");     //删除明细1所有行\nWfForm.delDetailRow(\"detail_1\", \"3,6\");     //删除明细1行标为3,6的行", 
      "signature": "delDetailRow: function(detailMark, rowIndexMark)", 
      "id": 19, 
      "name": "delDetailRow"
    }, 
    {
      "description": "添加明细行并设置初始值。", 
      "parameters": [
        {
          "type": "String", 
          "name": "detailMark", 
          "description": "明细表标识，例如明细1为detail_1，以此递增"
        }, 
        {
          "type": "JSON", 
          "name": "initAddRowData", 
          "description": "给新增行设置初始值，格式为{field110:{value:\"11\"},field112:{value:\"22\"},...}，注意字段标识不带下划线"
        }
      ], 
      "example": "//明细2添加一行并给新添加的行字段field111赋值\nWfForm.addDetailRow(\"detail_2\",{field111:{value:\"初始值\"}});\n\n//添加一行并给浏览按钮字段赋值\nWfForm.addDetailRow(\"detail_2\",{field222:{\n    value: \"2,3\",\n    specialobj:[\n        {id:\"2\",name:\"张三\"},\n        {id:\"3\",name:\"李四\"}\n    ]\n}});\n\n//动态字段赋值，明细1添加一行并给字段名称为begindate的字段赋值\nvar begindatefield = WfForm.convertFieldNameToId(\"begindate\", \"detail_1\");\nvar addObj = {};\naddObj[begindatefield] = {value:\"2019-03-01\"};\nWfForm.addDetailRow(\"detail_1\", addObj);\n\n//不推荐这种动态键值写法，IE不支持，避免使用\nWfForm.addDetailRow(\"detail_1\",{[begindatefield]:{value:\"2019-03-01\"}});", 
      "signature": "addDetailRow: function(detailMark, initAddRowData={})", 
      "id": 18, 
      "name": "addDetailRow"
    }, 
    {
      "description": "设置签字意见内容", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "text", 
          "description": "需设置的内容"
        }, 
        {
          "required": false, 
          "type": "Boolean", 
          "name": "isClear", 
          "description": "是否先清除意见，默认为true，即覆盖意见内容"
        }, 
        {
          "required": false, 
          "type": "Boolean", 
          "name": "isAfter", 
          "description": "追加的位置，默认为true，原意见内容尾部追加"
        }, 
        {
          "required": false, 
          "type": "Function", 
          "name": "callback", 
          "description": "意见设置成功后的回调函数"
        }
      ], 
      "example": [
        "WfForm.setSignRemark(\"覆盖设置签字意见内容\");", 
        "WfForm.setSignRemark(\"原有意见内容前追加请审批\", false, false);"
      ], 
      "signature": "WfForm.setSignRemark: function(text, isClear=true, isAfter=true, callback)", 
      "id": 38, 
      "name": "setSignRemark"
    }, 
    {
      "description": "获取签字意见内容", 
      "parameters": [], 
      "example": [
        "WfForm.getSignRemark();"
      ], 
      "signature": "WfForm.getSignRemark: function()", 
      "id": 37, 
      "name": "getSignRemark"
    }, 
    {
      "description": "获取字段当前的只读/必填属性。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标识，格式为field${字段ID}_${明细行号}"
        }
      ], 
      "example": "WfForm.getFieldCurViewAttr(\"field110_2\");   //获取明细字段属性，1：只读、2：可编辑、3：必填；已办全部为只读；", 
      "signature": "getFieldCurViewAttr: function(fieldMark)", 
      "id": 11, 
      "name": "getFieldCurViewAttr"
    }, 
    {
      "description": "根据字段ID获取字段信息。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldid", 
          "description": "字段ID，不带任何标识"
        }
      ], 
      "example": "WfForm.getFieldInfo(\"111\");", 
      "signature": "getFieldInfo: function(fieldid)", 
      "id": 10, 
      "name": "getFieldInfo"
    }, 
    {
      "description": "触发指定字段涉及的所有联动。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标识，格式为field${字段ID}_${明细行号}"
        }
      ], 
      "example": "//表单打开强制执行某字段的联动\njQuery(document).ready(function(){\n    WfForm.triggerFieldAllLinkage(\"field110\");  //执行字段涉及的所有联动\n});", 
      "signature": "triggerFieldAllLinkage: function(fieldMark)", 
      "id": 9, 
      "name": "triggerFieldAllLinkage"
    }, 
    {
      "description": "批量修改字段值或显示属性。", 
      "parameters": [
        {
          "type": "JSON", 
          "name": "changeDatas", 
          "description": "修改的字段值信息集合，例如：{\n    field110: {value: \"修改后的值\"},\n    field111: {value: \"2,3\", specialobj: [\n        {id: \"2\", name: \"张三\"},\n        {id: \"3\", name: \"李四\"}\n    ]},\n    ...\n}"
        }, 
        {
          "type": "JSON", 
          "name": "changeVariable", 
          "description": "修改的字段显示属性集合，例如：{\n    field110: {viewAttr: 2},\n    field111: {viewAttr: 3},\n    ...\n}"
        }
      ], 
      "example": "WfForm.changeMoreField({\n    field110: {value: \"修改后的值\"},\n    field111: {value: \"2,3\", specialobj: [\n        {id: \"2\", name: \"张三\"},\n        {id: \"3\", name: \"李四\"}\n    ]},\n    ...\n},\n{\n    field110: {viewAttr: 2},\n    field111: {viewAttr: 3},\n    ...\n});", 
      "signature": "changeMoreField: function(changeDatas, changeVariable)", 
      "id": 8, 
      "name": "changeMoreField"
    }, 
    {
      "description": "同时修改字段的值及显示属性。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标识，格式为field${字段ID}_${明细行号}"
        }, 
        {
          "type": "JSON", 
          "name": "valueInfo", 
          "description": "字段值信息，与接口2格式一致，例如：{value: \"修改的值\"}"
        }, 
        {
          "type": "JSON", 
          "name": "variableInfo", 
          "description": "变更属性，例如：{viewAttr: 3}"
        }
      ], 
      "example": "WfForm.changeSingleField(\"field110\", {value: \"修改的值\"}, {viewAttr: \"1\"});   //修改值同时置为只读", 
      "signature": "changeSingleField: function(fieldMark, valueInfo, variableInfo)", 
      "id": 7, 
      "name": "changeSingleField"
    }, 
    {
      "description": "改变单个字段显示属性（只读/必填等）。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标识，格式为field${字段ID}_${明细行号}"
        }, 
        {
          "type": "int", 
          "name": "viewAttr", 
          "description": "改变字段的状态，可选值:\n- 1: 只读\n- 2: 可编辑\n- 3: 必填\n- 4: 隐藏字段标签及内容\n- 5: 隐藏字段所在行（行内单元格不要存在行合并）"
        }
      ], 
      "example": "WfForm.changeFieldAttr(\"field110\", 1);  //字段修改为只读\nWfForm.changeFieldAttr(\"field110\", 4);  //字段标签以及内容都隐藏，效果与显示属性联动隐藏一致，只支持主表字段", 
      "signature": "changeFieldAttr: function(fieldMark, viewAttr)", 
      "id": 6, 
      "name": "changeFieldAttr"
    }, 
    {
      "description": "修改单个字段值（不支持附件类型）。此方法修改的字段如果涉及到触发联动、单元格格式化等，修改完值会自动触发联动/格式化。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标识，格式为field${字段ID}_${明细行号}"
        }, 
        {
          "type": "JSON", 
          "name": "valueInfo", 
          "description": "字段值信息，非浏览按钮字段格式为{value: \"修改的值\"}；specialobj为浏览按钮信息，数组格式；showhtml属性只在单行文本类型且只读情况下生效"
        }
      ], 
      "example": "//修改文本框、多行文本、选择框等字段类型\nWfForm.changeFieldValue(\"field123\", {value: \"1.234\"});\n\n//修改浏览框字段的值，必须有specialobj数组结构对象\nWfForm.changeFieldValue(\"field11_2\", {\n    value: \"2,3\",\n    specialobj: [\n        {id: \"2\", name: \"张三\"},\n        {id: \"3\", name: \"李四\"}\n    ]\n});\n\n//修改check框字段(0不勾选、1勾选)\nWfForm.changeFieldValue(\"field123\", {value: \"1\"});\n\n//针对单行文本框字段类型，只读情况，支持显示值跟入库值不一致\nWfForm.changeFieldValue(\"field123\", {\n    value: \"入库真实值\",\n    specialobj: {\n        showhtml: \"界面显示值\"\n    }\n});", 
      "signature": "changeFieldValue: function(fieldMark, valueInfo)", 
      "id": 5, 
      "name": "changeFieldValue"
    }, 
    {
      "description": "获取单个字段值。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标识，格式为field${字段ID}_${明细行号}"
        }
      ], 
      "example": "var fieldvalue = WfForm.getFieldValue(\"field110\");", 
      "signature": "getFieldValue: function(fieldMark)", 
      "id": 4, 
      "name": "getFieldValue"
    }, 
    {
      "description": "将字段名称转换成字段id。灵活运用此方法，可实现多表单、多环境，代码块通用；解耦代码块中指定fieldid。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldname", 
          "description": "字段名称"
        }, 
        {
          "type": "String", 
          "name": "symbol", 
          "description": "表单标识，可选，默认为\"main\"。可以指定主表(\"main\")或具体明细表(\"detail_1\")"
        }, 
        {
          "type": "Boolean", 
          "name": "prefix", 
          "description": "返回值是否需要field字符串前缀，默认为true"
        }
      ], 
      "example": "var fieldid = WfForm.convertFieldNameToId(\"zs\");\nvar fieldid = WfForm.convertFieldNameToId(\"zs_mx\", \"detail_1\");\nvar fieldid = WfForm.convertFieldNameToId(\"zs_mx\", \"detail_1\", false);", 
      "signature": "convertFieldNameToId: function(fieldname, symbol, prefix)", 
      "id": 3, 
      "name": "convertFieldNameToId"
    }, 
    {
      "description": "字段区域绑定动作事件。", 
      "parameters": [
        {
          "type": "String", 
          "name": "type", 
          "description": "动作类型，可选值：onblur、onfocus、onclick、ondbclick、mouseover、mouseout"
        }, 
        {
          "type": "String", 
          "name": "fieldids", 
          "description": "字段ID集合，多个逗号分隔，明细字段不加下划线对所有行生效"
        }, 
        {
          "type": "Function", 
          "name": "fn", 
          "description": "触发函数，此函数接收两个参数：fieldid以及rowIndex行号"
        }
      ], 
      "example": "WfForm.bindFieldAction(\"onfocus\", \"field111,field222\", function(fieldid, rowIndex){\n    alert(\"单行文本字段111获取焦点触发事件\");\n    alert(\"明细第\"+rowIndex+\"行字段222获取焦点触发事件\");\n});\n\nWfForm.bindFieldAction(\"onclick\", \"field333\", function(){\n    alert(\"浏览按钮字段单击触发事件，不是指点放大镜选择，是整个字段所在单元格区域单击都会触发\");\n});", 
      "signature": "bindFieldAction: function(type, fieldids, fn)", 
      "id": 30, 
      "name": "bindFieldAction"
    }, 
    {
      "description": "明细字段值变化触发事件。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMarkStr", 
          "description": "绑定的明细字段标识，不能有下划线标识，可多个拼接逗号隔开，例如：field110,field111"
        }, 
        {
          "type": "Function", 
          "name": "funobj", 
          "description": "字段值变更触发的自定义函数，函数默认传递以下三个参数：参数1：字段标识(field27583)，参数2：行标识，参数3：修改后的值"
        }
      ], 
      "example": "jQuery(document).ready(function(){\n    WfForm.bindDetailFieldChangeEvent(\"field27583,field27584\", function(id, rowIndex, value){\n        console.log(\"WfForm.bindDetailFieldChangeEvent--\", id, rowIndex, value);\n    });\n});", 
      "signature": "bindDetailFieldChangeEvent: function(fieldMarkStr, funobj)", 
      "id": 29, 
      "name": "bindDetailFieldChangeEvent"
    }, 
    {
      "description": "表单字段值变化触发事件。", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMarkStr", 
          "description": "绑定字段标识，可多个拼接逗号隔开，例如：field110(主字段),field111_2(明细字段)..."
        }, 
        {
          "type": "Function", 
          "name": "funobj", 
          "description": "字段值变化触发的自定义函数，函数默认传递以下三个参数：参数1：触发字段的DOM对象，参数2：触发字段的标识(field27555等)，参数3：修改后的值"
        }
      ], 
      "example": "WfForm.bindFieldChangeEvent(\"field27555,field27556\", function(obj, id, value){\n    console.log(\"WfForm.bindFieldChangeEvent--\", obj, id, value);\n});\n\n// 如果字段绑定事件，事件内改变本字段的值，需要setTimeout延时下\nWfForm.bindFieldChangeEvent(\"field111\", function(obj, id, value){\n    window.setTimeout(function(){\n        WfForm.changeFieldValue(\"field111\", {value:\"修改本字段值需要延时\"});\n    }, 10);\n    WfForm.changeFieldValue(\"field222\", {value:\"修改非本字段不需要延时\"});\n});", 
      "signature": "bindFieldChangeEvent: function(fieldMarkStr, funobj)", 
      "id": 28, 
      "name": "bindFieldChangeEvent"
    }, 
    {
      "description": "注册钩子事件，指定动作完成后触发。支持多次调用注册，按注册的先后顺序依次执行。", 
      "parameters": [
        {
          "type": "String", 
          "name": "actionname", 
          "description": "动作类型，具体可选取以下值:\n- WfForm.ACTION_ADDROW: 添加明细行，需拼明细表序号\n- WfForm.ACTION_DELROW: 删除明细行，需拼明细表序号\n- WfForm.ACTION_EDITDETAILROW: 移动端-编辑明细行，需拼明细表序号\n- WfForm.ACTION_SWITCHDETAILPAGING: 切换明细分页\n- WfForm.ACTION_SWITCHTABLAYOUT: 切换模板布局标签页"
        }, 
        {
          "type": "Function", 
          "name": "fn", 
          "description": "触发事件的回调函数"
        }
      ], 
      "example": "WfForm.registerAction(WfForm.ACTION_ADDROW+\"1\", function(index){\n    alert(\"添加行下标是\"+index);\n});     //下标从1开始，明细1添加行触发事件，注册函数入参为新添加行下标\n\nWfForm.registerAction(WfForm.ACTION_DELROW+\"2\", function(arg){\n    alert(\"删除行下标集合是\"+arg.join(\",\"));\n});     //下标从1开始，明细2删除行触发事件\n\nWfForm.registerAction(WfForm.ACTION_SWITCHDETAILPAGING, function(groupid){\n    alert(\"切换明细表\"+(groupid+1)+\"的页码触发事件\");\n});\n\nWfForm.registerAction(WfForm.ACTION_SWITCHTABLAYOUT, function(tabid){\n    alert(\"切换到标签项\"+tabid+\"触发事件\");\n});", 
      "signature": "registerAction: function(actionname, fn)", 
      "id": 2, 
      "name": "registerAction"
    }, 
    {
      "description": "注册拦截事件，指定动作执行前触发，并可阻断/放行后续操作。", 
      "parameters": [
        {
          "type": "String", 
          "name": "type", 
          "description": "动作类型。可选值：保存(WfForm.OPER_SAVE)，提交/批准/提交需反馈/不需反馈等(WfForm.OPER_SUBMIT)，提交至确认页面，如果是确认界面，点确认触发的是SUBMIT(WfForm.OPER_SUBMITCONFIRM)，退回(WfForm.OPER_REJECT)，批注提交(WfForm.OPER_REMARK)，干预(WfForm.OPER_INTERVENE)，转发(WfForm.OPER_FORWARD)，强制收回(WfForm.OPER_TAKEBACK)，删除(WfForm.OPER_DELETE)，添加明细行，需拼明细表序号(WfForm.OPER_ADDROW)，删除明细行，需拼明细表序号(WfForm.OPER_DELROW)，打印预览(WfForm.OPER_PRINTPREVIEW)，移动端-编辑明细(WfForm.OPER_EDITDETAILROW)，校验必填前触发事件(WfForm.OPER_BEFOREVERIFY)，转办(WfForm.OPER_TURNHANDLE)，意见征询(WfForm.OPER_ASKOPINION)，征询转办(WfForm.OPER_TAKFROWARD)，传阅(WfForm.OPER_TURNREAD)，强制归档(WfForm.OPER_FORCEOVER)，点右键按钮前(WfForm.OPER_BEFORECLICKBTN)，保存后页面跳转前(WfForm.OPER_SAVECOMPLETE)，撤回(WfForm.OPER_WITHDRAW)，页面关闭(WfForm.OPER_CLOSE)。"
        }, 
        {
          "type": "Function", 
          "name": "fun", 
          "description": "自定义函数，此函数入参为callback，执行自定义逻辑完成或异步ajax的success函数体内，放行需调用callback，不调用代表阻断后续操作。"
        }
      ], 
      "example": "jQuery().ready(function(){\n  WfForm.registerCheckEvent(WfForm.OPER_SAVE, function(callback){\n    jQuery(\"#field27495\").val(\"保存自动赋值\");\n    callback();    //继续提交需调用callback，不调用代表阻断\n  });\n  WfForm.registerCheckEvent(WfForm.OPER_SAVE+\",\"+WfForm.OPER_SUBMIT,function(callback){\n    //... 执行自定义逻辑\n    callback();\n  });\n  WfForm.registerCheckEvent(WfForm.OPER_ADDROW+\"1\", function(callback){\n    alert(\"添加明细1前执行逻辑，明细1则是OPER_ADDROW+1，依次类推\")\n    callback();    //允许继续添加行调用callback，不调用代表阻断添加\n  });\n  WfForm.registerCheckEvent(WfForm.OPER_DELROW+\"2\", function(callback){\n    alert(\"删除明细2前执行逻辑\")\n    callback();    //允许继续删除行调用callback，不调用代表阻断删除\n  });\n  WfForm.registerCheckEvent(WfForm.OPER_PRINTPREVIEW, function(callback){\n    alert(\"控制默认弹出的打印预览窗口\")\n    alert(\"当打印含签字意见列表，此接口需要放到跳转路由前执行，组件库提供此机制\");\n    window.WfForm.printTimeout = 3000;  //产品是默认延时1s自动弹出，可通过此方式控制延时时间\n    callback();    //允许继续弹出调用callback，不调用代表不自动弹预览\n  });\n  WfForm.registerCheckEvent(WfForm.OPER_EDITDETAILROW, function(callback,params){\n    alert(JSON.stringify(params));    //参数含当前点击哪个明细表哪一行\n    callback();    //允许跳转明细编辑窗口，不调用阻断跳转\n  });\n});", 
      "signature": "registerCheckEvent(type, fun)", 
      "id": 1, 
      "name": "registerCheckEvent"
    }, 
    {
      "signature": "proxyFieldComp: function(fieldMark, el, range)", 
      "example": "WfForm.proxyFieldComp(\"field111\", React.createElement(\"div\",{\n    style:{background:\"red\"}, \n    children:\"子内容\"\n}));\n\n//字段111在只读、可编辑、必填情况下自定义渲染\nWfForm.proxyFieldComp(\"field222_1\", \"<div>自定义渲染字段</div>\", \"2,3\");", 
      "name": "proxyFieldComp", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "type": "React Comp or String", 
          "name": "el", 
          "description": "渲染的组件或组件的字符串形式"
        }, 
        {
          "type": "String", 
          "name": "range", 
          "description": "作用范围，默认全部，可选值：1:只读、2:可编辑、3:必填，多个范围用逗号分隔"
        }
      ], 
      "description": "自定义代理渲染单行文本框字段。"
    }, 
    {
      "signature": "afterFieldComp: function(fieldMark, el, range)", 
      "example": "WfForm.afterFieldComp(\"field111\",\nReact.createElement(\"a\",{\n    href:\"/test.jsp?userid=\"+WfForm.getFieldValue(\"field222\"),\n    children:\"自定义链接\"\n}));\n//字段111在只读、可编辑、必填情况下,追加渲染个自定义链接，链接参数依赖表单其它字段值", 
      "name": "afterFieldComp", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "type": "React Comp or String", 
          "name": "el", 
          "description": "追加渲染的组件或组件的字符串形式"
        }, 
        {
          "type": "String", 
          "name": "range", 
          "description": "作用范围，默认全部，可选值：1:只读、2:可编辑、3:必填，多个范围用逗号分隔"
        }
      ], 
      "description": "自定义追加渲染表单字段。"
    }, 
    {
      "signature": "proxyFieldContentComp: function(fieldid, fn)", 
      "example": "WfForm.proxyFieldContentComp(\"111\", function(info,compFn){\n    console.log(\"字段id：\",info.fieldid);\n    console.log(\"明细行号：\",info.rowIndex);\n    console.log(\"字段只读必填属性：\",info.viewAttr);\n    console.log(\"字段值：\",info.fieldValue);\n    //返回自定义渲染的组件\n    return React.createElement(\"div\", {}, [\"想怎么玩就怎么玩\"]);\n    //返回原组件\n    return compFn();\n    //返回基于原组件的复写组件\n    return React.createElement(\"div\", {}, [\"前置组件\",compFn(),\"后置组件\"]);\n});\n//如果此接口调用在代码块、custompage等(非模块加载前调用)，需强制渲染字段一次\nWfForm.forceRenderField(\"field111\");", 
      "name": "proxyFieldContentComp", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldid", 
          "description": "主表/明细表字段ID，格式$fieldid$"
        }, 
        {
          "type": "Function", 
          "name": "fn", 
          "description": "代理的函数，返回自定义渲染的组件"
        }
      ], 
      "description": "函数式自定义渲染表单字段。"
    }, 
    {
      "signature": "generateFieldContentComp: function(fieldMark)", 
      "example": "//以明细多字段、子明细的需求为例子\n//步骤1：模板单元格给自定义class：area_1\n//步骤2：自定义排版渲染area_1区域\nconst {Provider}=mobxReact;\nconst globalStore = WfForm.getGlobalStore();\nconst layoutStore = WfForm.getLayoutStore();\nReactDOM.render(\n    <div>\n        <Provider globalStore={globalStore} layoutStore={layoutStore}>\n            <table>\n                <tr>\n                    <td>{WfForm.generateFieldContentComp(\"field111_1\")}</td>\n                    <td>{WfForm.generateFieldContentComp(\"field112_1\")}</td>\n                </tr>\n                <tr>\n                    <td>{WfForm.generateFieldContentComp(\"field113_1\")}</td>\n                    <td>{WfForm.generateFieldContentComp(\"field114_1\")}</td>\n                </tr>\n            </table>\n        </Provider>\n    </div>,\n    document.getElementByclassName(\"area_1\")[0]\n);   //仅供参考，参数二要区分行号定位到具体单元格", 
      "name": "generateFieldContentComp", 
      "parameters": [
        {
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标识，格式field${字段ID}_${明细行号}"
        }
      ], 
      "description": "根据字段标识获取字段组件。"
    }, 
    {
      "name": "verifyFormRequired", 
      "parameters": [
        {
          "required": false, 
          "type": "Boolean", 
          "name": "mustAddDetail", 
          "description": "是否校验必须新增空明细，默认为true"
        }, 
        {
          "required": false, 
          "type": "Boolean", 
          "name": "fieldRequired", 
          "description": "是否校验字段必填，默认为true"
        }
      ], 
      "returns": {
        "type": "Boolean", 
        "description": "校验结果，true表示通过，false表示存在未必填情况"
      }, 
      "signature": "WfForm.verifyFormRequired: function(mustAddDetail=true, fieldRequired=true)", 
      "example": [
        "WfForm.verifyFormRequired(); //触发必填验证并提示", 
        "var result = WfForm.verifyFormRequired(false, true); //仅校验字段必填并提示", 
        "if(!result) alert('存在未必填情况');"
      ], 
      "description": "触发一次必填验证"
    }, 
    {
      "signature": "WfForm.getBrowserShowName: function(fieldMark, splitChar)", 
      "example": [
        "WfForm.getBrowserShowName(\"field110\"); //以逗号分隔获取浏览按钮字段显示值"
      ], 
      "name": "getBrowserShowName", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "required": false, 
          "type": "String", 
          "name": "splitChar", 
          "description": "分隔符，默认以逗号分隔"
        }
      ], 
      "description": "获取浏览按钮的显示值"
    }, 
    {
      "signature": "WfForm.removeSelectOption: function(fieldMark, optionKeys)", 
      "example": [
        "WfForm.removeSelectOption(\"field112\", \"3,4\"); //移除选择框中id值为3/4的选项"
      ], 
      "name": "removeSelectOption", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "required": true, 
          "type": "String", 
          "name": "optionKeys", 
          "description": "需要移除的Option选项key值，多个以逗号分隔"
        }
      ], 
      "description": "移除选择框字段选项"
    }, 
    {
      "signature": "WfForm.controlSelectOption: function(fieldMark, optionKeys)", 
      "example": [
        "WfForm.controlSelectOption(\"field112\", \"1,2,4\"); //控制选择框只显示1/2/4的选项", 
        "WfForm.controlSelectOption(\"field112\", \"\"); //清除选择框所有选项"
      ], 
      "name": "controlSelectOption", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "required": true, 
          "type": "String", 
          "name": "optionKeys", 
          "description": "完全控制选择框的选项范围"
        }
      ], 
      "description": "控制选择框字段选项"
    }, 
    {
      "signature": "WfForm.getSelectShowName: function(fieldMark, splitChar)", 
      "example": [
        "WfForm.getSelectShowName(\"field110_3\"); //获取选择框字段显示值"
      ], 
      "name": "getSelectShowName", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "required": false, 
          "type": "String", 
          "name": "splitChar", 
          "description": "分隔符，默认以逗号分隔(只有复选框多选才会用到)"
        }
      ], 
      "description": "获取选择框字段的显示值"
    }, 
    {
      "signature": "WfForm.setTextFieldEmptyShowContent: function(fieldMark, showContent)", 
      "example": [
        "WfForm.setTextFieldEmptyShowContent(\"field27555\", \"单文本默认提示信息1\");", 
        "WfForm.setTextFieldEmptyShowContent(\"field27566\", \"多文本默认提示2\");", 
        "WfForm.setTextFieldEmptyShowContent(\"field222_0\", \"明细字段提示信息\");"
      ], 
      "name": "setTextFieldEmptyShowContent", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "required": true, 
          "type": "String", 
          "name": "showContent", 
          "description": "空值时显示的提示信息，灰色"
        }
      ], 
      "description": "文本字段可编辑状态，当值为空显示默认灰色提示信息，鼠标点击输入时提示消失"
    }, 
    {
      "signature": "WfForm.overrideBrowserProp: function(fieldMark, jsonParam)", 
      "example": [
        "WfForm.overrideBrowserProp(\"field111\", {", 
        "    onBeforeFocusCheck: function(success, fail){/***/}", 
        "});"
      ], 
      "name": "overrideBrowserProp", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "required": true, 
          "type": "JSON", 
          "name": "jsonParam", 
          "description": "扩展或复写的props参数"
        }
      ], 
      "description": "复写浏览按钮组件的props"
    }, 
    {
      "signature": "WfForm.controlDateRange: function(fieldMark, start, end)", 
      "example": [
        "WfForm.controlDateRange(\"field111\", -5, 10);", 
        "WfForm.controlDateRange(\"field111\", 0, '2019-12-31');", 
        "WfForm.controlDateRange(\"field222_0\", '2019-05-01', '2019-05-31');"
      ], 
      "name": "controlDateRange", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "fieldMark", 
          "description": "字段标示，格式field${字段ID}_${明细行号}"
        }, 
        {
          "required": true, 
          "type": "String", 
          "name": "start", 
          "description": "开始日期，支持两种格式：标准日期格式（例如：2019-05-28）或整数（相对于当前日期的天数）"
        }, 
        {
          "required": false, 
          "type": "String", 
          "name": "end", 
          "description": "结束日期，与开始日期格式相同"
        }
      ], 
      "description": "控制日期浏览按钮的可选日期范围"
    }, 
    {
      "signature": "WfForm.controlRadioPrintText: function(fieldid)", 
      "example": [
        "WfForm.controlRadioPrintText(\"12580\");"
      ], 
      "name": "controlRadioPrintText", 
      "parameters": [
        {
          "required": true, 
          "type": "String", 
          "name": "fieldid", 
          "description": "字段id，格式${字段ID}，支持明细字段"
        }
      ], 
      "description": "控制Radio框字段打印是否仅显示选中项文字"
    }
  ]
}